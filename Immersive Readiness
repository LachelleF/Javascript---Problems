// ex 1 Write a function identity which expects 1 argument and simply returns that input value.
// Calling your function should result in:

function identity(input) {
    return input;
}

identity("Hello world");
identity(500);

// ex 2
// Write a function coffeeLover which takes in a boolean value, and returns the string "Enjoy a cup for free!"
// if the input is true, or "Take a look at our other drinks!" if the input is false.

var coffeeLover(input) {
    if (input === true) {
        return "Enjoy a cup of coffee for free!";
    }
    return "Take a look at our other drinks!";
}

coffeeLover(true);
coffeeLover(false);

// ex 3 Write a function coffeeLoverExtended which takes in an object with the structure like:
var customer001 = {
    name: "John Riley",
    ticketNumber: "AO1",
    enjoysCoffee: true
};

var customer002 = {
    name: "Harold Crane",
    ticketNumber: "A02",
    enjoysCoffee: false
};

function coffeeLoverExtended(obj){
    if (obj.enjoysCoffee === true) {
        return "Enjoy a cup for free!";
    }
    return "Take a look at our other drinks.";
}
var output = coffeeLoverExtended(customer002);
console.log(output);

coffeeLoverExtended(customer001); //"Enjoy a cup for free!"
coffeeLoverExtended(customer002); //"Take a look at our other coffees."

//ex 4 
/*write a function convertToKilometers which expects a number of miles to be passed in,
and returns the number multiplied by 1.60934 (appx 1 mile in km)*/

function convertToKilometers(miles) {
    console.log(miles * 1.60934);
}
//convertToKilometers(50); //80.467
convertToKilometers(361); //500.973

//ex 5
/*Write a function isGoodFreeThrowShooter which takes in a shooting percentage as a number
you can assume will be between 0 and 1; exclusive of 1 and returns based on following criteria
>=0 and < 1
if the number is btw 0 = 0.65, return "Horrible freethrow shooter"
if the number is btw 0.65 - 0.80 return "Decent freethrow shooter"
if the number is btw 0.80 - and 1.00 return "Great freethrow shooter"*/
/*
Each range is inclusive of the lower bound, and exclusive of the upper -- in other words, 
0.65 is counted as a "Decent freethrow shooter" (not "Horrible freethrow shooter") and 0.80 is 
considered a "Great freethrow shooter" (not "Decent freethrow shooter"). Additionally, you can get a number 
as high as 0.99, but never 1 (this is what the original problem statement means by "exclusive of 1").

Calling your function should result in:*/

function isGoodFreeThrowShooter(percentage) {
    if(num >= 0 && num < 0.65) { 
        return "Horrible freethrow shooter";
    }
    if(num >= 0.65 && num < 0.80) {
        return "Decent freethrow shooter";
    }
    if(num >= 0.80 && num < 1.00) {
        return "Great freethrow shooter";
    }
}

isGoodFreeThrowShooter(0.30);
isGoodFreeThrowShooter(0.89);
isGoodFreeThrowShooter(0.75);

//ex 6
/*Write a function dogsIWouldPet that takes in a an item (string) and 
returns a sentence (string) stating dogs you would pet in comparison to the item.
Bonus (extra): If your function were passed in a string "I do not like dogs", you can 
have your function return "I would not pet dogs".*/

function dogsIWouldPet(str) {
    if (str === "I do not like dogs.") {
        return "I would not pet dogs."
    }
    else { 
        return `I would pet dogs no bigger than a ${str}.`
    }
}

console.log(dogsIWouldPet("ottoman")); //I would pet dogs no bigger than an ottoman.
//dogsIWouldPet("small horse"); //I would pet dogs no bigger than a small horse.
//dogsIWouldPet("Terrier"); //I would pet dogs no bigger than a Terrier.

//ex 7
/*Write a function isTallEnough which takes in a height (number) in inches, and returns
true if the input is >= 48" and false if < 48"
*/

function isTallEnough(num) {
    if(num >= 48) {
        return true;
    }
    return false;
}
//console.log(isTallEnough(48));
//console.log(isTallEnough(32));
console.log(isTallEnough(66));

//ex 8
/*Write a function favoriteDessert which takes in no arguments, but returns an object
with 3 key-value pairs. The names of each property and their respective values are up to you,
but the values can't be undefined. How would you desdribe your favorite dessert?*/

function favoriteDessert() {
    return {
        name: "Icecream Sundae",
        baseIngred: "Breyers Natural Vanilla",
        topping:  "crushed English toffee"
    }
}
console.log(favoriteDessert()); //Note Lesson Learned, be sure when not passing an argument into a function,
//that you invoke () the object when calling the function.

//ex 9
/* Write a function countNumStrings which takes in an array of mixed elements (different data
    types), and returns the number of strings there are in an array.*/
    
function countNumStrings(arr){
    //returning a number/count of strings
    numStrings = 0;
    //loop through the array
    for (var i = 0; i < arr.length; i ++) {
        //evaluate each element to verify if string
        if(typeof arr[i] === 'string') {
            numStrings += 1;
        }
    }
    return numStrings;
}
console.log(countNumStrings(["hello", "world", 5, true, {}]));
//console.log(countNumStrings(["foo", 2, 10, "bar", 5, false, {}, "baz"]));
//countNumStrings(["There is only one string in this example"]);

// //ex 10
// /*Write a function listLengthOfAllWords which takes in an array of words (strings), and
// returns an array of numbers representing the length of each word.*/
// //calling function should result in provided outputs.

// function listLengthOfAllWords(array) {
// //create a new array to hold #s
//     var wordLengths = [];
// //iterate thru the array
//     for (var i = 0; i < array.length; i++) { 
// //evalue the length of each element
//     wordLengths.push(array[i].length);   
//     }
// //push/store the ele length(num) into new array
//     return wordLengths;
// }

// console.log(listLengthOfAllWords(['hello', 'world', 'I', 'can', 'code'])); //5, 5, 1, 3, 4

/*10 part B. Now return the longest word in the array*/
/*Should clarify what to do if words are the same length. return the 1st? or return the 2nd.*/
function longestOfAllWords(array) {
    var longestWord = '';
    var longestWordLength = 0;
    for (var i = 0; i < array.length; i++){
        if ((array[i].length > longestWordLength) || (array[i].length === longestWordLength)) {
            longestWord = array[i];
            longestWordLength = array[i].length;
        }
    }
    return longestWord;
}
console.log(longestOfAllWords(['hello', 'world', 'I', 'can', 'code'])); //5, 5, 1, 3, 4
//NOTE: lesson learned, need to account for all cases. e.g. what if words are same length?
//In this case, we chose to go with 2nd word. But if we were asked to return the 1st longest
//word, would create seperate if/else condition with expression that requires no change to new array

//10 part C. now return an array of the string lengths using .map

var listLengthOfAllWords = (function(words) {
    return words.map(function(word) {
        return word.length;
    })
});
console.log(listLengthOfAllWords(['hello', 'world', 'I', 'can', 'code'])); //5, 5, 1, 3, 4
